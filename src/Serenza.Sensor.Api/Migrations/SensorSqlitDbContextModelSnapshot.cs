// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Serenza.Sensor.Infrastructure.Repositories;

#nullable disable

namespace Serenza.Sensor.Api.Migrations
{
    [DbContext(typeof(SensorSqlitDbContext))]
    partial class SensorSqlitDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("Serenza.Sensor.Infrastructure.Dto.SensorDto", b =>
                {
                    b.Property<int>("SensorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("TemperatureMax")
                        .HasColumnType("REAL");

                    b.Property<double>("TemperatureMin")
                        .HasColumnType("REAL");

                    b.HasKey("SensorId");

                    b.ToTable("Sensors");

                    b.HasData(
                        new
                        {
                            SensorId = 1,
                            State = "COLD",
                            TemperatureMax = 22.0,
                            TemperatureMin = -32768.0
                        },
                        new
                        {
                            SensorId = 2,
                            State = "WARM",
                            TemperatureMax = 40.0,
                            TemperatureMin = 22.0
                        },
                        new
                        {
                            SensorId = 3,
                            State = "HOT",
                            TemperatureMax = 32767.0,
                            TemperatureMin = 40.0
                        });
                });

            modelBuilder.Entity("Serenza.Sensor.Infrastructure.Dto.SensorHistoryDto", b =>
                {
                    b.Property<int>("SensorHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("GetTemperatureDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SensorId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Temperature")
                        .HasColumnType("REAL");

                    b.HasKey("SensorHistoryId");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorHistories");
                });

            modelBuilder.Entity("Serenza.Sensor.Infrastructure.Dto.SensorHistoryDto", b =>
                {
                    b.HasOne("Serenza.Sensor.Infrastructure.Dto.SensorDto", "Sensor")
                        .WithMany("SensorHistories")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Serenza.Sensor.Infrastructure.Dto.SensorDto", b =>
                {
                    b.Navigation("SensorHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
